plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'io.gitlab.arturbosch.detekt'
    id 'org.jetbrains.kotlin.plugin.serialization'
}

kotlin {
    jvm {
        compilations.all {
            kotlinOptions {
                jvmTarget = "1.8"
            }
        }
    }

    sourceSets {
        all {
            languageSettings {
                enableLanguageFeature('InlineClasses')
                useExperimentalAnnotation("kotlinx.coroutines.ExperimentalCoroutinesApi")
                useExperimentalAnnotation("kotlinx.coroutines.FlowPreview")
            }
        }
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-websockets:$ktor_version"
                implementation "org.kodein.di:kodein-di-erased:$kodein_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlin_coroutines_version"
                implementation "com.ToxicBakery.logging:common:$arbor_version"
                implementation "com.benasher44:uuid:$uuid_version"

                implementation project(':configuration')
                implementation project(':model')
                implementation project(':persistence')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')

                implementation "io.ktor:ktor-server-test-host:$ktor_version"
            }
        }
        jvmMain {
            languageSettings {
                useExperimentalAnnotation("io.ktor.util.KtorExperimentalAPI")
            }
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }
    }

    targets.all {
        compilations.all {
            kotlinOptions {
                allWarningsAsErrors = true
            }
        }
    }
}
